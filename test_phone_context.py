#!/usr/bin/env python3
"""
Test del sistema de contexto personalizado por tel√©fono.
"""

import httpx
import asyncio


BASE_URL = "http://localhost:8000"


async def setup_test_data():
    """Inserta datos de prueba: empresa, establecimiento, chacra y tel√©fono."""
    print("üîß Configurando datos de prueba...\n")
    
    # 1. Crear empresa de prueba
    print("1. Creando empresa 'Molino Test'...")
    empresa_data = {"nombre_empresa": "Molino Test"}
    
    async with httpx.AsyncClient() as client:
        # Verificar si ya existe
        response = await client.get(f"{BASE_URL}/empresas")
        empresas = response.json() if response.status_code == 200 else []
        
        empresa_test = next((e for e in empresas if e['nombre_empresa'] == 'Molino Test'), None)
        
        if not empresa_test:
            # Crear directamente en Supabase usando el endpoint de cat√°logo
            # Por ahora usaremos un ID conocido o crearemos manualmente
            print("   ‚ö†Ô∏è  Necesitas crear la empresa manualmente en Supabase")
            print("   Ejecuta: INSERT INTO empresas (nombre_empresa) VALUES ('Molino Test');")
            return None
        
        empresa_id = empresa_test['id_empresa']
        print(f"   ‚úÖ Empresa ID: {empresa_id}")
        
        # 2. Registrar tel√©fono de prueba
        print("\n2. Registrando tel√©fono +598 99 123 456...")
        telefono_data = {
            "numero_telefono": "+598 99 123 456",
            "id_empresa": empresa_id,
            "notas": "Tel√©fono de prueba para testing"
        }
        
        response = await client.post(f"{BASE_URL}/telefonos", json=telefono_data)
        if response.status_code == 201:
            telefono = response.json()
            print(f"   ‚úÖ Tel√©fono registrado: {telefono['numero_normalizado']}")
        else:
            print(f"   ‚ö†Ô∏è  Error: {response.text}")
        
        # 3. Verificar que el tel√©fono est√° asociado
        print("\n3. Verificando asociaci√≥n...")
        response = await client.get(f"{BASE_URL}/telefonos/check/+598 99 123 456")
        if response.status_code == 200:
            empresas_asociadas = response.json()
            print(f"   ‚úÖ Empresas asociadas: {empresas_asociadas}")
        
        return empresa_id


async def test_registered_phone():
    """Prueba con un n√∫mero registrado."""
    print("\n" + "="*70)
    print("üì± TEST 1: N√∫mero REGISTRADO (+598 99 123 456)")
    print("="*70 + "\n")
    
    payload = {
        "from_number": "+598 99 123 456",
        "body": "crear remito",
        "message_id": "test_registered_001",
    }
    
    async with httpx.AsyncClient(timeout=60.0) as client:
        response = await client.post(
            f"{BASE_URL}/webhook/whatsapp?use_v2=true",
            json=payload
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"ü§ñ RemiBOT: {data['reply']}\n")
            print(f"üìä Metadata: {data['metadata']}")
            
            # Verificar que el prompt incluye contexto de empresa
            if "empresa" in data['reply'].lower() or "establecimiento" in data['reply'].lower():
                print("\n‚úÖ El LLM recibi√≥ contexto de empresa")
            else:
                print("\n‚ö†Ô∏è  El LLM NO parece tener contexto de empresa")
        else:
            print(f"‚ùå Error: {response.status_code} - {response.text}")


async def test_unregistered_phone():
    """Prueba con un n√∫mero NO registrado."""
    print("\n" + "="*70)
    print("üì± TEST 2: N√∫mero NO REGISTRADO (+598 91 999 999)")
    print("="*70 + "\n")
    
    payload = {
        "from_number": "+598 91 999 999",
        "body": "hola, quiero crear un remito",
        "message_id": "test_unregistered_001",
    }
    
    async with httpx.AsyncClient(timeout=60.0) as client:
        response = await client.post(
            f"{BASE_URL}/webhook/whatsapp?use_v2=true",
            json=payload
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"ü§ñ RemiBOT: {data['reply']}\n")
            print(f"üìä Metadata: {data['metadata']}")
            
            # Verificar que el LLM explica que no est√° registrado
            if "registrado" in data['reply'].lower() or "autorizado" in data['reply'].lower():
                print("\n‚úÖ El LLM explic√≥ que el n√∫mero no est√° registrado")
            else:
                print("\n‚ö†Ô∏è  El LLM NO explic√≥ la situaci√≥n correctamente")
        else:
            print(f"‚ùå Error: {response.status_code} - {response.text}")


async def test_phone_normalization():
    """Prueba la normalizaci√≥n de n√∫meros."""
    print("\n" + "="*70)
    print("üîß TEST 3: Normalizaci√≥n de N√∫meros")
    print("="*70 + "\n")
    
    test_numbers = [
        "+598 99 123 456",
        "099 123 456",
        "59899123456",
        "(598) 99-123-456",
    ]
    
    async with httpx.AsyncClient() as client:
        for numero in test_numbers:
            response = await client.get(f"{BASE_URL}/telefonos/check/{numero}")
            if response.status_code == 200:
                empresas = response.json()
                print(f"   {numero:20} ‚Üí Empresas: {empresas}")


async def main():
    print("ü§ñ Test del Sistema de Contexto Personalizado por Tel√©fono\n")
    
    try:
        # Setup
        empresa_id = await setup_test_data()
        
        if empresa_id is None:
            print("\n‚ö†Ô∏è  Necesitas configurar datos de prueba primero")
            print("   Crea una empresa en Supabase y vuelve a ejecutar este script")
            return
        
        # Tests
        await test_registered_phone()
        await test_unregistered_phone()
        await test_phone_normalization()
        
        print("\n" + "="*70)
        print("‚úÖ Tests completados")
        print("="*70)
        
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
